
#include "GameScene.h"
#include "stdafx.h"
#include <cstdio>
#include <cstdlib>
#include <iostream>
using std::cerr;
using std::endl;

//#include "defines.h"

//using glm::vec3;


#include <glm/gtc/matrix_transform.hpp>
#include <glm/gtx/transform2.hpp>


using namespace Game;

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Default constructor
	/////////////////////////////////////////////////////////////////////////////////////////////
	GameScene::GameScene()
	{
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	//Initialise the scene
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::initScene(Camera::QuatCamera &camera)
	{
		//|Compile and link the shader  
		DrawClass.CompileAndLinkShader();

		DrawClass.EnableDepth();

		//Set up the lighting
		setLightParams(camera);


		//Create the plane to represent the ground
		//plane = new VBOPlane(100.0, 100.0, 100, 100);



	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	//Update not used at present
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::update(float t)
	{

	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Set up the lighting variables in the shader
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::setLightParams(Camera::QuatCamera &camera)
	{
		vec3 WorldLightPos = vec3(10.0f, 10.0f, 10.0f);
		DrawClass.setLightParams(camera.position(), WorldLightPos, 0.5f, 1.0f, 30.0f);
	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	// Render the scene
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::render(Camera::QuatCamera &camera)
	{
		//OpenGL Clear ColourBits and Depth bits before rendering scene
		DrawClass.clearBits();


		//Now set up the teapot 
		model = mat4(1.0f);
		setMatrices(camera);

		
	}


	/////////////////////////////////////////////////////////////////////////////////////////////
	//Send the MVP matrices to the GPU
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::setMatrices(Camera::QuatCamera &camera)
	{
		mat4 mv = (camera.view()) * model;

	//Negate Translate for camera view
		mat4 mTempView = camera.view();
		mTempView[3][0] = 0.0f;
		mTempView[3][1] = 0.0f;
		mTempView[3][2] = 0.0f;
		mv = mTempView * model;

		mat3 mNormal = mat3(vec3(mv[0]), vec3(mv[1]), vec3(mv[2]) );

		DrawClass.setMatricies(mNormal, model, camera.view(), camera.projection());

	}

	/////////////////////////////////////////////////////////////////////////////////////////////
	// resize the viewport
	/////////////////////////////////////////////////////////////////////////////////////////////
	void GameScene::resize(Camera::QuatCamera &camera, int w, int h)
	{
		DrawClass.setViewPort(0, 0, w, h);
		m_iWidth = w;
		m_iHeight = h;
		camera.setAspectRatio((float)w / h);

	}

